# general

alias cp='cp -i'
alias df='df -kTh'
alias diff='colordiff'
alias du='du -kh'
alias g='git'
alias gr='git fetch upstream; git rebase upstream/$(git branch --show-current)'
alias h='history'
alias ll='ls -l'
alias ls='ls -F'
alias mv='mv -i'
alias rm='rm -i'
alias vi='vim'
alias md5='md5 -r'
alias watch='watch '
alias tree='tree -aFI .git'

# python

alias pycodestyle='pycodestyle --ignore=E501'

# docker

alias dockercontainercleanup='docker container prune --force; docker volume prune --force; docker network prune --force'
alias dockerimagecleanup='docker image prune --force'
alias dockerimageupdate="docker container prune --force; (docker image ls -f dangling=false --format '{{.Repository}}:{{.Tag}}' | grep -v 'None' | xargs -n 1 docker image pull); docker image prune --force"

# kubernetes

if [ $commands[kubectl] ]; then
  source <(kubectl completion zsh)
fi

if [ $commands[helm] ]; then
  source <(helm completion zsh)
fi

# kubectl

alias k='kubectl'
alias kc='kubecolor'
alias kd='kubectl describe'
alias kg='kubectl get'
alias kpf='kubectl port-forward'
alias krm='kubectl delete'
alias kex='kubectl exec -i -t'

alias kgn='kubectl get nodes'
alias kgnw='kubectl get nodes -o wide'
alias kgny='kubectl get nodes -o yaml'
alias kgnj='kubectl get nodes -o json'
alias kgnf='kubectl get nodes --label-columns=node.kubernetes.io/instance-type,topology.kubernetes.io/zone,eks.amazonaws.com/capacityType,karpenter.sh/capacity-type,eks.amazonaws.com/nodegroup'
alias kgna='kubectl get nodes --label-columns=node.kubernetes.io/instance-type,topology.kubernetes.io/zone -o wide'

alias kgp='kubectl get pods'
alias kgpw='kubectl get pods -o wide'
alias kgpy='kubectl get pods -o yaml'
alias kgpj='kubectl get pods -o json'
alias kgpa='kubectl get pods -o wide --all-namespaces'
alias kgpas='kubectl get pods -o wide --all-namespaces --sort-by spec.nodeName'

alias kgd='kubectl get deployment'
alias kgds='kubectl get daemonsets'
alias kgi='kubectl get ingress'
alias kgs='kubectl get service'
alias kgsts='kubectl get statefulsets'

# kubectl (plugins required)

alias krc='kubectl resource_capacity'
alias krcp='kubectl resource_capacity -p'

# aws specific

alias awsecsls='aws ecs list-clusters'
alias awseksls='aws eks list-clusters'

# eks specific

function get-instance-id-by-node() {
  [ $# -ne 1 ] && return
  kubectl get nodes $1 -o jsonpath='{.spec.providerID}' | cut -d'/' -f5
}

function ssm-into-eks-node() {
local TARGET=$(get-instance-id-by-eks-node-name $1)
  aws ssm start-session --target ${TARGET}
}

# golang

function go-setup() {
  local GOVERSION=$1
  local FORCE=$2
  local PKG_REMOTE_PATH="https://go.dev/dl/go${GOVERSION}.darwin-amd64.tar.gz"
  local PKG_OUTPUT_PATH="/tmp/go${GOVERSION}.darwin-amd64.tar.gz"
  local PKG_EXTRACT_PATH="/tmp/go-${GOVERSION}"
  local PKG_TARGET_PATH="/usr/local/go-${GOVERSION}"

  if [ -z "${GOVERSION}" ]; then
    echo "abort, please specify the version to install."
    return
  fi

  if [ -e "${PKG_TARGET_PATH}" ]; then
    if [ "${FORCE}" != "force" ]; then
      echo "abort, target version already existed."
      return
    fi
    rm -f ${PKG_OUTPUT_PATH}
  fi

  if [ ! -f "${PKG_OUTPUT_PATH}" ]; then
    wget ${PKG_REMOTE_PATH} -O ${PKG_OUTPUT_PATH} --no-verbose --show-progress
  fi

  rm -rf ${PKG_EXTRACT_PATH}
  mkdir -p ${PKG_EXTRACT_PATH}
  tar xf ${PKG_OUTPUT_PATH} --strip-components 1 -C ${PKG_EXTRACT_PATH}
  if [ $? -ne 0 ]; then
    rm -rf ${PKG_EXTRACT_PATH}
  else
    echo "Hint: password might be required to finish setup"
    sudo rm -rf ${PKG_TARGET_PATH}
    sudo mv ${PKG_EXTRACT_PATH} ${PKG_TARGET_PATH}

    go-switch ${GOVERSION}
  fi

  rm -f ${PKG_OUTPUT_PATH}
}

function go-switch() {
  local GOVERSION=$1

  if [ -z "${GOVERSION}" ]; then
    find /usr/local -maxdepth 1 -type d -name "go*"
    return
  fi

  if [ ! -d "/usr/local/go-${GOVERSION}" ]; then
    return
  fi

  echo "Hint: password might be required to finish setup"
  sudo rm -f /usr/local/go
  sudo ln -s -f /usr/local/go-${GOVERSION} /usr/local/go

  echo "Hint: check version installed"
  go version
}

# misc

function random_password() {
  bw generate -ulns --length 16
  bw generate -uln  --length 16
  bw generate --words 5 -p
}

function ssl_certs_check() {
  echo | openssl s_client -servername $1 -connect $1:443 2>/dev/null | openssl x509 -noout -dates
}

function remove_color() {
  # https://unix.stackexchange.com/questions/140251/strip-color-on-os-x-with-bsd-sed-or-any-other-tool
  sed -e "s,$(printf '\033')\\[[0-9;]*[a-zA-Z],,g" $1
}

function cleanup_history() {
  rm -rf ~/.DS_Store
  rm -rf ~/.calc_history
  rm -rf ~/.config/gcloud/logs
  rm -rf ~/.httpie
  rm -rf ~/.lesshst
  rm -rf ~/.mysql_history
  rm -rf ~/.oracle_jre_usage
  rm -rf ~/.python_history
  rm -rf ~/.rediscli_history
  rm -rf ~/.sqlite_history
  rm -rf ~/.terraform.d/checkpoint_*
  rm -rf ~/.wget-hsts
  rm -rf ~/.z
  rm -rf ~/.zsh_history
  rm -rf ~/.zshrc.bak
  rm -rf ~/.zshrc.zwc

  find ~/.vagrant.d/boxes -type d -exec rmdir {} \; 2>/dev/null
}

function secure_remove() {
  shred -u -n 9 $@
}

function ip() {
  curl -s ipconfig.io/json | jq .
}
