# general

alias cp='cp -i'
alias df='df -kTh'
alias diff='colordiff'
alias du='du -kh'
alias h='history'
alias ll='ls -l'
alias ls='ls -F'
alias mv='mv -i'
alias rm='rm -i'
alias vi='vim'
alias md5='md5 -r'
alias watch='watch '
alias tree='tree -aFI .git'

# docker
alias docker='finch'

# git
alias gc='git config --list --show-origin'
alias gr='git fetch upstream; git rebase upstream/$(git branch --show-current)'

# vim
alias vimdiffs='vimdiff -c "set diffopt+=iwhite"'

# kubernetes

if [ $commands[kubectl] ]; then
  source <(kubectl completion zsh)
fi

if [ $commands[helm] ]; then
  source <(helm completion zsh)
fi

# kubectl

alias k='kubectl'
alias kd='kubectl describe'
alias kg='kubectl get'

alias kgn='kubectl get nodes'
alias kgnw='kubectl get nodes -o wide'
alias kgny='kubectl get nodes -o yaml'
alias kgnj='kubectl get nodes -o json'
alias kgna='kubectl get nodes -o wide --label-columns="node.kubernetes.io/instance-type,topology.kubernetes.io/zone,eks.amazonaws.com/compute-type"'

alias kgp='kubectl get pods'
alias kgpw='kubectl get pods -o wide'
alias kgpy='kubectl get pods -o yaml'
alias kgpj='kubectl get pods -o json'
alias kgpa='kubectl get pods --all-namespaces'
alias kgpaw='kubectl get pods -o wide --all-namespaces'
alias kgpas='kubectl get pods -o wide --all-namespaces --sort-by spec.nodeName'

# eks specific

function get-instance-id-by-node() {
  [ $# -ne 1 ] && return
  kubectl get nodes $1 -o jsonpath='{.spec.providerID}' | cut -d'/' -f5
}

function ssm-into-ec2-node() {
  local TARGET=${1}
  local REGION=${2}
  local EC2_ID=""

  if [ ${#REGION} -le 0 ]; then
    REGION=$(aws configure get region)
  fi

  if [[ ${TARGET} =~ ^i-[0-9a-f]{6,17} ]]; then
    EC2_ID="${TARGET}"
  else
    EC2_ID=$(aws ec2 describe-instances \
      --query "Reservations[0].Instances[0].InstanceId" --output "text" \
      --filters "Name=private-dns-name,Values=${privateDnsName}" --region ${REGION})
  fi

  aws ssm start-session --target ${EC2_ID} --region ${REGION}
}

function ssm-into-eks-node() {
  local TARGET=$(kubectl get nodes ${1} -o jsonpath='{.spec.providerID}' | cut -d'/' -f5)
  local REGION=${2}
  if [ ${#REGION} -le 0 ]; then
    REGION=$(aws configure get region)
  fi
  aws ssm start-session --target ${TARGET} --region ${REGION}
}

function ssm-proxy-to-ec2-node() {
  local TARGET=${1}
  local REGION=${2}
  local EC2_ID=""

  if [ ${#REGION} -le 0 ]; then
    REGION=$(aws configure get region)
  fi

  if [[ ${TARGET} =~ ^i-[0-9a-f]{6,17} ]]; then
    aws ssm start-session --target ${TARGET} \
      --document-name AWS-StartPortForwardingSession \
      --parameters '{"portNumber":["22"],"localPortNumber":["2222"]}' \
      --region ${REGION}
  fi
}

# golang

function go-setup() {
  local GOVERSION=$1
  local FORCE=$2
  local PKG_NAME="go${GOVERSION}.$(uname -o | tr '[A-Z]' '[a-z]')-$(uname -m).tar.gz"
  local PKG_REMOTE_PATH="https://go.dev/dl/${PKG_NAME}"
  local PKG_OUTPUT_PATH="/tmp/${PKG_NAME}"
  local PKG_EXTRACT_PATH="/tmp/go-${GOVERSION}"
  local PKG_TARGET_PATH="/usr/local/go-${GOVERSION}"

  if [ -z "${GOVERSION}" ]; then
    echo "abort, please specify the version to install."
    return
  fi

  if [ -e "${PKG_TARGET_PATH}" ]; then
    if [ "${FORCE}" != "force" ]; then
      echo "abort, target version already existed."
      return
    fi
    rm -f ${PKG_OUTPUT_PATH}
  fi

  if [ ! -f "${PKG_OUTPUT_PATH}" ]; then
    wget ${PKG_REMOTE_PATH} -O ${PKG_OUTPUT_PATH} --no-verbose --show-progress
  fi

  rm -rf ${PKG_EXTRACT_PATH}
  mkdir -p ${PKG_EXTRACT_PATH}
  tar xf ${PKG_OUTPUT_PATH} --strip-components 1 -C ${PKG_EXTRACT_PATH}
  if [ $? -ne 0 ]; then
    rm -rf ${PKG_EXTRACT_PATH}
  else
    echo "Hint: password might be required to finish setup"
    sudo rm -rf ${PKG_TARGET_PATH}
    sudo mv ${PKG_EXTRACT_PATH} ${PKG_TARGET_PATH}

    go-switch ${GOVERSION}
  fi

  rm -f ${PKG_OUTPUT_PATH}
}

function go-switch() {
  local GOVERSION=$1

  if [ -z "${GOVERSION}" ]; then
    find /usr/local -maxdepth 1 -type d -name "go*"
    return
  fi

  if [ ! -d "/usr/local/go-${GOVERSION}" ]; then
    return
  fi

  echo "Hint: password might be required to finish setup"
  sudo rm -f /usr/local/go
  sudo ln -s -f /usr/local/go-${GOVERSION} /usr/local/go

  echo "Hint: check version installed"
  go version
}

# misc

function ppcsv() {
  mlr --icsv --opprint cat $1
}

function random_password() {
  bw generate -ulns --length 16
  bw generate -uln  --length 16
  bw generate --words 5 -p
}

function brewuu() {
  brew update
  brew upgrade
  brew cu --all
  brew cleanup --prune=all
}

function ssl_certs_check() {
  echo | openssl s_client -servername $1 -connect $1:443 2>/dev/null | openssl x509 -noout -dates
}

function remove_color() {
  # https://unix.stackexchange.com/questions/140251/strip-color-on-os-x-with-bsd-sed-or-any-other-tool
  sed -e "s,$(printf '\033')\\[[0-9;]*[a-zA-Z],,g" $1
}

function cleanup_history() {
  rm -rf ~/.DS_Store
  rm -rf ~/.calc_history
  rm -rf ~/.config/gcloud/logs
  rm -rf ~/.httpie
  rm -rf ~/.lesshst
  rm -rf ~/.mysql_history
  rm -rf ~/.oracle_jre_usage
  rm -rf ~/.python_history
  rm -rf ~/.rediscli_history
  rm -rf ~/.sqlite_history
  rm -rf ~/.terraform.d/checkpoint_*
  rm -rf ~/.wget-hsts
  rm -rf ~/.z
  rm -rf ~/.zcompdump
  rm -rf ~/.zsh_history
  rm -rf ~/.zshrc.bak
  rm -rf ~/.zshrc.zwc

  find ~/.vagrant.d/boxes -type d -exec rmdir {} \; 2>/dev/null
  find ~/ -type f -maxdepth 3 -name .DS_Store -delete 2>/dev/null
}

function secure_remove() {
  shred -u -n 9 $@
}

function ipinfo() {
  curl -sSL https://ifconfig.io/all.json | jq .
}
